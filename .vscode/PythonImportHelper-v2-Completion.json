[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "discord.ext.commands.context",
        "description": "discord.ext.commands.context",
        "isExtraImport": true,
        "detail": "discord.ext.commands.context",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "discord.ext.commands.context",
        "description": "discord.ext.commands.context",
        "isExtraImport": true,
        "detail": "discord.ext.commands.context",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "discord.ext.commands.context",
        "description": "discord.ext.commands.context",
        "isExtraImport": true,
        "detail": "discord.ext.commands.context",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "discord.ext.commands.bot",
        "description": "discord.ext.commands.bot",
        "isExtraImport": true,
        "detail": "discord.ext.commands.bot",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "discord.ext.commands.bot",
        "description": "discord.ext.commands.bot",
        "isExtraImport": true,
        "detail": "discord.ext.commands.bot",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "discord.ext.commands.bot",
        "description": "discord.ext.commands.bot",
        "isExtraImport": true,
        "detail": "discord.ext.commands.bot",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Embed",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Member",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Embed",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "RequestModal",
        "importPath": "modals.request",
        "description": "modals.request",
        "isExtraImport": true,
        "detail": "modals.request",
        "documentation": {}
    },
    {
        "label": "change_bot_status",
        "importPath": "tasks.status",
        "description": "tasks.status",
        "isExtraImport": true,
        "detail": "tasks.status",
        "documentation": {}
    },
    {
        "label": "Award",
        "kind": 6,
        "importPath": "cogs.award",
        "description": "cogs.award",
        "peekOfCode": "class Award(commands.Cog):\n    def __init__(self, bot: Bot):\n        self.bot = bot\n    def get_authorized_users(self):\n        # List of users by id that are authorized to run the command.\n        # 142508669999775754 = 創意\n        # 611026501671976975 = het_tanis\n        return [\"142508669999775754\", \"611026501671976975\"]\n    def is_authorized(self, ctx: Context):\n        return str(ctx.message.author.id) in self.get_authorized_users()",
        "detail": "cogs.award",
        "documentation": {}
    },
    {
        "label": "Jacket",
        "kind": 6,
        "importPath": "cogs.jacket",
        "description": "cogs.jacket",
        "peekOfCode": "class Jacket(commands.Cog):\n    def __init__(self, bot: Bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_ready(self):\n        logger.info(f\"{__name__} is online\")\n    def jacket_files(self):\n        path = os.path.realpath(os.path.dirname(__file__)) + os.path.sep\n        jacket_image = path + \"jacket.png\"\n        jacket_text = path + \"jacket_text.png\"",
        "detail": "cogs.jacket",
        "documentation": {}
    },
    {
        "label": "TMate",
        "kind": 6,
        "importPath": "cogs.tmate",
        "description": "cogs.tmate",
        "peekOfCode": "class TMate(commands.Cog):\n    def __init__(self, bot: Bot):\n        self.bot = bot\n    @property\n    def uri(self):\n        result = \"\"\n        with open(\"./uri\", \"r\", encoding=\"utf-8\") as _file:\n            result = _file.read()\n        return result\n    def get_authorized_users(self):",
        "detail": "cogs.tmate",
        "documentation": {}
    },
    {
        "label": "RequestModal",
        "kind": 6,
        "importPath": "modals.request",
        "description": "modals.request",
        "peekOfCode": "class RequestModal(discord.ui.Modal):\n    \"\"\"\n    A modal for users to submit requests. Upon submission, the request is sent\n    to a designated channel for moderators to review.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes the RequestModal with a single text input field for the request.\n        \"\"\"\n        super().__init__(title=\"Make a request\")",
        "detail": "modals.request",
        "documentation": {}
    },
    {
        "label": "BOT_STATUSES",
        "kind": 5,
        "importPath": "tasks.status",
        "description": "tasks.status",
        "peekOfCode": "BOT_STATUSES = cycle(\n    [\n        \"'I'll fix her calm down' - Bob the Builder\",\n        \"A hammer can fix every problem.  Every.  Problem.\",\n        \"My IQ test results came back. They were negative.\",\n        \"Before you marry a person, make them use a computer with a slow Internet connection to see who they really are.\",\n        \"A Freudian slip is when you say one thing but mean your mother.\",\n        \"I remixed the remix... it was back to normal.\",\n        \"Alcoholism is a disease. But it's like the only disease you can get yelled at for having.\",\n        \"Dogs are forever in the pushup position.\",",
        "detail": "tasks.status",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "decorator_example",
        "description": "decorator_example",
        "peekOfCode": "def decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\ndef say_whee():\n    print(\"Whee!\")\n# @decorator\ndef easy_say_whee():",
        "detail": "decorator_example",
        "documentation": {}
    },
    {
        "label": "say_whee",
        "kind": 2,
        "importPath": "decorator_example",
        "description": "decorator_example",
        "peekOfCode": "def say_whee():\n    print(\"Whee!\")\n# @decorator\ndef easy_say_whee():\n    print(\"easy whee\")\neasy_say_whee()",
        "detail": "decorator_example",
        "documentation": {}
    },
    {
        "label": "easy_say_whee",
        "kind": 2,
        "importPath": "decorator_example",
        "description": "decorator_example",
        "peekOfCode": "def easy_say_whee():\n    print(\"easy whee\")\neasy_say_whee()",
        "detail": "decorator_example",
        "documentation": {}
    },
    {
        "label": "BOT_NAME",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "BOT_NAME = os.getenv(\"BOT_NAME\", \"GenericBot\")\nDISCORD_TOKEN = os.getenv(\"DISCORD_TOKEN\")\n# Ensure the Discord token is set\nif not DISCORD_TOKEN:\n    raise ValueError(\"DISCORD_TOKEN environment variable not set.\")\n# Discord bot intents and configuration\nintents = discord.Intents.all()\nintents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n@bot.event",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DISCORD_TOKEN",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DISCORD_TOKEN = os.getenv(\"DISCORD_TOKEN\")\n# Ensure the Discord token is set\nif not DISCORD_TOKEN:\n    raise ValueError(\"DISCORD_TOKEN environment variable not set.\")\n# Discord bot intents and configuration\nintents = discord.Intents.all()\nintents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n@bot.event\nasync def on_ready():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents = discord.Intents.all()\nintents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n@bot.event\nasync def on_ready():\n    \"\"\"\n    This event is called when the bot is ready and connected to Discord.\n    It also starts the bot's status update task and syncs the bot's slash commands.\n    \"\"\"\n    change_bot_status.start(bot)  # Start the bot's status update task",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents.message_content",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n@bot.event\nasync def on_ready():\n    \"\"\"\n    This event is called when the bot is ready and connected to Discord.\n    It also starts the bot's status update task and syncs the bot's slash commands.\n    \"\"\"\n    change_bot_status.start(bot)  # Start the bot's status update task\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bot = commands.Bot(command_prefix=\"!\", intents=intents)\n@bot.event\nasync def on_ready():\n    \"\"\"\n    This event is called when the bot is ready and connected to Discord.\n    It also starts the bot's status update task and syncs the bot's slash commands.\n    \"\"\"\n    change_bot_status.start(bot)  # Start the bot's status update task\n    try:\n        synced_commands = await bot.tree.sync()  # Sync the bot's slash commands",
        "detail": "main",
        "documentation": {}
    }
]